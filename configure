#!/usr/bin/env python3
#
# Copyright 2017 The Procyon Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), "build", "lib", "scripts"))
try:
    import cfg
except ImportError:
    pass


DEBIAN = cfg.Distro(
    name="debian",
    packages={
        "clang": "clang",
        "clang++": "clang",
        "gn": "gn",
        "ninja": "ninja-build",
    },
    sources=[
        ("arescentral", "http://apt.arescentral.org", "contrib",
         "5A4F5210FF46CEE4B799098BAC879AADD5B51AE9"),
    ],
    install="apt-get install".split(),
    update="apt-get update".split(),
    add_key="apt-key adv --keyserver keyserver.ubuntu.com --recv".split(),
)

MAC = cfg.Distro(
    name="mac",
    packages={
        "ninja": "ninja",
        "gn": "sfiera/gn/gn",
    },
    sources=[],
    install="brew install".split(),
    update=None,
    add_key=None,
)

WIN = cfg.Distro(
    name="win",
    packages={
        "ninja":
        "https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip:ninja.exe",
        "gn": "https://chrome-infra-packages.appspot.com/dl/gn/gn/windows-amd64/+/latest:gn.exe",
    },
    sources=[],
    install="[download from]".split(),
    update=None,
    add_key=None,
)

DISTROS = {d.name: d for d in [DEBIAN, MAC, WIN]}


def main():
    check_submodules()

    config_dir = os.path.dirname(sys.argv[0])
    if config_dir != "":
        os.chdir(config_dir)
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-m",
                        "--mode",
                        metavar="MODE",
                        type=str,
                        choices="dbg dev opt".split(),
                        default="opt",
                        help="set build configuration:\n"
                        "  - opt: compile for fast binaries (default)\n"
                        "  - dev: compile for fast builds\n"
                        "  - dbg: add debugging symbols")
    parser.add_argument("-o",
                        "--target-os",
                        metavar="OS",
                        type=str,
                        help="target os (default: host os)")
    parser.add_argument("--prefix",
                        type=str,
                        default="/usr/local",
                        help="installation prefix (default: /usr/local)")
    parser.add_argument("--sanitizer",
                        choices="memory address undefined".split(),
                        default="",
                        help="run sanitizer (memory, address, or undefined)")
    args = parser.parse_args()

    config = {
        "mode": args.mode,
        "target_os": args.target_os,
        "prefix": args.prefix,
        "sanitizer": args.sanitizer,
    }

    cfg.configure("procyon", DISTROS, config)


def check_submodules():
    REQUIRED_SUBMODULES = [
        "build/lib/BUILD.gn",
        "ext/gmock",
    ]
    missing = False
    for module in REQUIRED_SUBMODULES:
        if not os.path.exists(os.path.join(module)):
            missing = True
            break

    if missing:
        print("Some submodules are missing. Run:")
        print("  $ git submodule update --init")
        sys.exit(1)


if __name__ == "__main__":
    main()
